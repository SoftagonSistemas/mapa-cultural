name: Docker Image CI

on:
  push:
    branches: ['*']
  pull_request:
    branches: ['*']

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.versioning.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v1.0.0")
          echo "Latest tag: $latest_tag"
          echo "latest_tag=${latest_tag}" >> $GITHUB_OUTPUT

      - name: Calculate New Version
        id: versioning
        run: |
          latest_tag="${{ steps.get_latest_tag.outputs.latest_tag }}"
          latest_version=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$latest_version"
          new_patch=$((patch + 1))
          new_version="${major}.${minor}.${new_patch}"
          echo "New version: $new_version"
          echo "new_version=${new_version}" >> $GITHUB_OUTPUT

  build-and-push:
    needs: version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push mapasculturais
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile
          push: true
          tags: |
            softagon/mapasculturais:latest
            softagon/mapasculturais:${{ needs.version.outputs.new_version }}
          cache-from: type=registry,ref=softagon/mapasculturais:latest
          cache-to: type=inline
          provenance: true
          platforms: linux/amd64,linux/arm64

      - name: Build and push mapasculturais-db
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/Dockerfile-db
          push: true
          tags: |
            softagon/mapasculturais-db:latest
            softagon/mapasculturais-db:${{ needs.version.outputs.new_version }}
          cache-from: type=registry,ref=softagon/mapasculturais-db:latest
          cache-to: type=inline
          provenance: true
          platforms: linux/amd64,linux/arm64

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Get commit message
        id: get_commit_message
        run: |
          echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
          git log -1 --pretty=%B >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          new_tag="v${{ needs.version.outputs.new_version }}"
          echo "Creating new tag: $new_tag"
          git tag -a $new_tag -m "Release $new_tag"
          git push origin $new_tag

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: Release v${{ needs.version.outputs.new_version }}
          body: |
            ## Release v${{ needs.version.outputs.new_version }}
            
            ### üîÑ Updates
            - Docker images updated to version ${{ needs.version.outputs.new_version }}
            
            ### üìù Commit Message
            ${{ env.COMMIT_MESSAGE }}
            
            ### üê≥ Docker Images
            - `softagon/mapasculturais:${{ needs.version.outputs.new_version }}`
            - `softagon/mapasculturais-db:${{ needs.version.outputs.new_version }}`
            
            ### üì¶ Platforms
            - linux/amd64
            - linux/arm64
          draft: false
          prerelease: false